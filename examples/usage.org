#+TITLE: org-test Usage Examples

*org-test* is a simple extension that provides literal testing tools.

This document demonstrates various match types and usage patterns of org-test.

* Getting Started

org-test uses a simple naming convention; *Expectation blocks* are named with =expect-= prefix: =expect-<name>-<type>=.

Where =<type>= is one of: =equals=, =includes=, =matches=, etc. Check [[Match Types]].

** Basic Example

#+begin_src org
,#+NAME: hello
,#+begin_src emacs-lisp
,"Hello, World!"
,#+end_src

,#+NAME: expect-hello-equals
,#+begin_example
,Hello, World!
,#+end_example
#+end_src

When you run the test, org-test will:
1. Find the expectation blocks. (=expect-hello-equals=)
1. Find the test blocks with names of expectation blocks. (=hello=)
2. Execute the test blocks using org-babel.
2. Compare its output with =expect-hello-equals=.
3. Report the result

* Expectation Blocks

Blocks following the naming convention are Expectation Blocks.

#+begin_example
expect-<name>-<type>
#+end_example

- =name= :: The name of the block to test.
- =type= :: See [[Match Types]].

* Test Blocks

The blocks named =name= are assumed to be test blocks.

The source code block will be executed using Org-Babel, and their results will be tested as strings.

Other block types will be treated as strings.

* Match Types

org-test supports various match types for test expectations. Each test can have multiple expectations with different match types.

** Equals

The ~equals~ match type requires the output to be exactly equal (after trimming whitespace).

#+NAME: exact-match
#+begin_src emacs-lisp
"Hello, World!"
#+end_src

#+NAME: expect-exact-match-equals
: Hello, World!

The negative form of =equals= is =not-equals=.

#+NAME: expect-exact-match-not-equals
: 안녕, 세상아!

** Includes

The ~includes~ match type checks if the expected text appears anywhere in the output.

#+NAME: substring
#+begin_src emacs-lisp
"The quick brown fox jumps over the lazy dog"
#+end_src

#+NAME: expect-substring-includes
: quick brown fox

The negative form of =includes= is =not-includes=.

#+NAME: expect-substring-not-includes
: white fox

=includes-any= and =includes-all= are available for multiple line matching:

- =includes-any= :: At least one of the expected lines should appear in the output
- =includes-all= :: All expected lines should appear in the output (order-independent)

#+NAME: expect-substring-includes-any
#+begin_example
quick
dark
cat
#+end_example

#+NAME: expect-substring-includes-all
#+begin_example
quick
brown
dog
#+end_example

** Matches

The ~matches~ matches types support regular expression patterns.

#+NAME: regex
#+begin_src emacs-lisp
"The answer is 42"
#+end_src

#+NAME: expect-regex-matches
: answer is [0-9]+

#+NAME: expect-regex-not-matches
: ^answer is [0-9]+$

* Running Tests

There are several ways to run tests:

** Interactive Mode

From within Emacs:

#+begin_src emacs-lisp :eval no
;; Test current buffer
M-x org-test-run-current-buffer

;; Test specific file
(org-test-run "examples/usage.org")

;; Test all .org files in directory
(org-test-run "examples/")

;; Test multiple targets
(org-test-run "api.org" "ui.org" "integration.org")
#+end_src

Results are displayed in an =*Org Test*= buffer in org-mode format with clickable links to test locations.

** Batch Mode

From command line:

#+begin_src shell :eval no
# Using nix (if using flake.nix)
nix develop -c check

# Direct emacs invocation
emacs --batch -l org-test.el --eval '(org-test-run "examples/")'
#+end_src

Results are printed to stdout in a compact format.

* Configuration

** Timeout

Set a global timeout for test execution (default: 30 seconds):

#+begin_src emacs-lisp :eval no
;; Set timeout to 60 seconds
(setq org-test-default-timeout 60)

;; Disable timeout
(setq org-test-default-timeout nil)
#+end_src

Tests that exceed the timeout will fail with a timeout error.

* Best Practices

** Organizing Tests for Export

For clean document exports (HTML, Markdown, PDF), group all test expectations under a =:noexport:= heading.

This keeps your literate documents readable while maintaining comprehensive test coverage.

*** Example Structure

#+begin_src org
,* Examples

,** Cowsay Demo

,#+NAME: cowsay
,#+begin_src bash
,nix run nixpkgs#cowsay -- "Hello"
,#+end_src

,** String Manipulation

,#+NAME: reverse-string
,#+begin_src emacs-lisp
,(reverse "Hello")
,#+end_src

,* Tests :noexport:

All expectation blocks go here - won't appear in exported documents.

,#+NAME: expect-cowsay-includes
,#+begin_example
,Hello
,#+end_example

,#+NAME: expect-reverse-string-equals
,: olleH
#+end_src

The =:noexport:= tag ensures that:
- Test expectations don't clutter your documentation
- Examples remain clear and focused
- Exported documents maintain professional appearance
- Tests stay close to their source for maintenance

